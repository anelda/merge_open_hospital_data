theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
View(kemri_who_tb)
mfl_refined <- read_csv("data/tidy_data/mfl_refine.csv", col_names = TRUE,
cols(dataset = col_character(),
country_name = col_character(),
country_iso3c = col_character(),
admin1_name = col_character(),
admin1_abb = col_character(),
admin2_name = col_character(),
admin2_abb = col_character(),
admin3_name = col_character(),
admin4_name = col_character(),
city_name = col_character(),
lat = col_double(),
long = col_double(),
type = col_character(),
sector = col_character(),
fac_name = col_character(),
osm_id = col_character(),
osm_type = col_character(),
date_closed = col_date(),
date_opened = col_date(),
contact_person = col_character(),
phys_address = col_character(),
post_address = col_character(),
web = col_character(),
contact_phone = col_character(),
contact_email = col_character(),
org_owner = col_character(),
org_rural_urban = col_character(),
services = col_character(),
num_beds_usable = col_integer(),
num_beds_approved = col_integer(),
num_surgical_beds_usable = col_integer(),
num_surgical_beds_approved = col_integer(),
num_theatres = col_integer(),
num_surgeons_qual = col_integer(),
num_surgeons_unqual = col_integer(),
num_nurses = col_integer(),
dispensing = col_character(),
open_hours = col_character(),
emergency = col_character(),
notes = col_character(),
water = col_character(),
electricity = col_character(),
wheelchair = col_character(),
completeness = col_double(),
admin3_abb = col_character(),
fac_id = col_character(),
super_type = col_character()
)
)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
completeness_tb <- mfl_refined %>%
group_by(dataset) %>%
summarise("Average completeness (%)" = round(mean(completeness)))
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
## Requires dplyr 1.0.0 to use relocate()
req_packages <- c("knitr", "DT", "filesstrings", "stringdist", "lubridate", "purrr", "readxlsb", "readxl", "afrihealthsites", "forcats",  "tmap", "tmaptools")
library("tidyverse")
lapply(req_packages, library, character.only = TRUE) %>%
invisible()
ggsave("facility_count.png", path = "img/")
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities)) +
geom_bar(stat = "identity", fill = "#53868b", width = 0.6) +
theme_minimal() +
labs(y = "Number of facilities listed", x = "Dataset") +
ggtitle("Number of facilities listed in each dataset")
ggsave("facility_count.png", path = "img/")
ggsave("facility_count.png", path = "img")
ggsave("facility_count.png")
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities)) +
geom_bar(stat = "identity", fill = "#53868b", width = 0.6) +
theme_minimal() +
labs(y = "Number of facilities listed", x = "Dataset") +
ggtitle("Number of facilities listed in each dataset")
ggsave("facility_count.png")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
# How many facilities for each dataset
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
## Requires dplyr 1.0.0 to use relocate()
req_packages <- c("knitr", "DT", "filesstrings", "stringdist", "lubridate", "purrr", "readxlsb", "readxl", "afrihealthsites", "forcats",  "tmap", "tmaptools")
library("tidyverse")
lapply(req_packages, library, character.only = TRUE) %>%
invisible()
mfl_tb <- tibble(country_name = character() ,
country_iso3c = character()  ,
admin1_name = character(),
admin1_abb = character(),
admin2_name = character(),
admin2_abb = character(),
admin3_name = character(),
admin4_name = character(),
city_name = character(),
lat = numeric(),
long = numeric(),
type = character(),
sector = character(),
fac_name = character(),
osm_id = numeric(),
osm_type = character(),
date_closed = ymd(),
date_opened = ymd(),
contact_person = character(),
phys_address = character(),
post_address = character(),
web = character(),
contact_phone = character(),
contact_email = character(),
org_owner = character(),
org_rural_urban = character(),
services = character(),
num_beds_usable = numeric(),
num_beds_approved = numeric(),
num_surgical_beds_usable = numeric(),
num_surgical_beds_approved = numeric(),
num_theatres = numeric(),
num_surgeons_qual = numeric(),
num_surgeons_unqual = numeric(),
num_nurses = numeric(),
dispensing = character(),
open_hours = character(),
emergency = character(),
notes = character(),
water = character(),
electricity = character(),
wheelchair = character(),
completeness = numeric())
sources_tbl <- tibble(Name = c("Geographical maldistribution of surgical resources in South Africa: A review of the number of hospitals, hospital beds and surgical beds",
"District Health Barometer info 2016 2017 06 Feb 2018",
"District Health Barometer 2018/2019",
"National Department of Health Data Dictionary ",
"Healthsites.io",
"KEMRI/WHO: A spatial database of health facilities managed by the public health sector in sub-Saharan Africa"),
`Short Name` = c("Hospital Bed",
"DoH DHB 2016/2017",
"HST DHB 2018/2019",
"DoH Data Dictionary",
"Healthsites",
"KEMRI/WHO"),
Information = c("Facility names, Number of beds and surgeons",
"Facility names, type",
"Facility names, type, date opened, coords, date closed",
"Facility names, addresses, coordinate, type, rural/urban, ownership(e.g. national/provincial/private)",
"Facility names, type, coordinates, and others depending on crowdsourced data contributed",
"Facility names, type, ownership, coordinates, source"),
`Admin Level` = c("District Municipality (3)",
"District Municipality (3)",
"District Municipality (3)",
"Local Municipality (4)",
"Country (1)",
"Province (2)"),
Web = c("[Article](http://www.samj.org.za/index.php/samj/article/view/12143)",
"[Report](http://www.health.gov.za/index.php/2014-03-17-09-09-38/reports/category/424-reports-2017#)",
"[Report](https://www.hst.org.za/publications/Pages/DISTRICT-HEALTH-BAROMETER-201819.aspx)",
"[Data Repository](https://dd.dhmis.org/orgunits.html?file=NIDS%20Integrated&source=nids&ver=91b9)",
"[Homepage](https://healthsites.io/)",
"[Article](https://dx.doi.org/10.1038%2Fs41597-019-0142-2)"),
`Raw Data` = c("[Figshare](https://figshare.com/articles/SURGICAL_RESOURCES_latestmarch2016_xlsx/12066711)",
"[Spreadsheet](http://www.health.gov.za/index.php/2014-03-17-09-09-38/reports/category/424-reports-2017?download=2652:district-health-barometer-info-2016-2017-06-feb-2018\ )",
"[Spreadsheet](https://www.hst.org.za/publications/District%20Health%20Barometers/DHB2019_19Feb2020.xlsb)",
"[No direct link available - select Download on page and select 'Level 5' data](https://dd.dhmis.org/orgunits.html?file=NIDS%20Integrated&source=nids&ver=91b9)",
"[API access](https://github.com/healthsites/healthsites/wiki/API) or [shapefile](https://healthsites.io/map?country=South Africa [Download directly in R via afrihealthsites package](https://afrimapr.github.io/afrimapr.website/code/) that forms part of [afrimapr](http://afrimapr.org))",
"[Spreadsheet](https://figshare.com/articles/Public_health_facilities_in_sub_Saharan_Africa/7725374) or [Download directly in R via afrihealthsites package](https://afrimapr.github.io/afrimapr.website/code/) that forms part of [afrimapr](http://afrimapr.org)"),
`Data License` = c("CC-BY-4.0",
"No explicit license",
"No explicit license",
"No explicit license",
"CC-BY-4.0",
"CC-0"),
`Origin/Owner` = c("Dr. Angela Dell",
"South African National Department tof Health",
"Health Systems Trust",
"South African National Department of Health",
"Healthsites.io/Crowdsourcing",
"Hosted by WHO Global Malaria Program/Collected by KEMRI"),
`Last Updated` = c("Mar 2016",
"Feb 2018",
"Feb 2020",
"Aug 2019",
"Mar 2020",
"Feb 2019")
)
colmns = dim(sources_tbl)[2]
sources_tbl %>%  kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
kableExtra::column_spec(1:colmns, border_right = T, border_left = T) %>%
kableExtra::scroll_box(width = "100%", height = "700px")
remove(sources_tbl)
cat(readLines("readme/readme_za_hospital_resources.txt"), sep = '\n')
# How many facilities for each dataset
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities)) +
geom_bar(stat = "identity", fill = "#53868b", width = 0.6) +
theme_minimal() +
labs(y = "Number of facilities listed", x = "Dataset") +
ggtitle("Number of facilities listed in each dataset")
remove(count_facilities)
```{r dev="png"}
# How many facilities for each dataset
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities)) +
geom_bar(stat = "identity", fill = "#53868b", width = 0.6) +
theme_minimal() +
labs(y = "Number of facilities listed", x = "Dataset") +
ggtitle("Number of facilities listed in each dataset")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
test <- mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10)
test %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
```{r dev="png", fig.height = 10, fig.width=10}
# How many high level types of facilities per dataset
test <- mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10)
test %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
# How many facilities for each dataset
count_facilities <- mfl_refined %>% group_by(dataset) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities)) +
geom_bar(stat = "identity", fill = "#53868b", width = 0.6) +
theme_minimal() +
labs(y = "Number of facilities listed", x = "Dataset") +
ggtitle("Number of facilities listed in each dataset")
remove(count_facilities)
# How many high level types of facilities per dataset
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
filter(n > 10) %>%
ggplot(aes(x = super_type, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset (n > 10)") +
coord_flip() +
facet_wrap(~ dataset) +
theme(legend.position = "none")
ggsave("facility_types.png")
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
## Requires dplyr 1.0.0 to use relocate()
req_packages <- c("knitr", "DT", "filesstrings", "stringdist", "lubridate", "purrr", "readxlsb", "readxl", "afrihealthsites", "forcats",  "tmap", "tmaptools")
library("tidyverse")
lapply(req_packages, library, character.only = TRUE) %>%
invisible()
sources_tbl %>%  kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
kableExtra::column_spec(1:colmns, border_right = T, border_left = T) %>%
kableExtra::scroll_box(width = "100%", height = "700px") %>%
kableExtra::add_footnote(c("* A previous version incorrectly stated that the data is licensed as CC-BY 4.0", "** A previous version stated the owner/origin as Healthsites/Crowdsourcing"), notation = "symbol")
sources_tbl <- tibble(Name = c("Geographical maldistribution of surgical resources in South Africa: A review of the number of hospitals, hospital beds and surgical beds",
"District Health Barometer info 2016 2017 06 Feb 2018",
"District Health Barometer 2018/2019",
"National Department of Health Data Dictionary ",
"Healthsites.io",
"KEMRI/WHO: A spatial database of health facilities managed by the public health sector in sub-Saharan Africa"),
`Short Name` = c("Hospital Bed",
"DoH DHB 2016/2017",
"HST DHB 2018/2019",
"DoH Data Dictionary",
"Healthsites",
"KEMRI/WHO"),
Information = c("Facility names, Number of beds and surgeons",
"Facility names, type",
"Facility names, type, date opened, coords, date closed",
"Facility names, addresses, coordinate, type, rural/urban, ownership(e.g. national/provincial/private)",
"Facility names, type, coordinates, and others depending on crowdsourced data contributed",
"Facility names, type, ownership, coordinates, source"),
`Admin Level` = c("District Municipality (3)",
"District Municipality (3)",
"District Municipality (3)",
"Local Municipality (4)",
"Country (1)",
"Province (2)"),
Web = c("[Article](http://www.samj.org.za/index.php/samj/article/view/12143)",
"[Report](http://www.health.gov.za/index.php/2014-03-17-09-09-38/reports/category/424-reports-2017#)",
"[Report](https://www.hst.org.za/publications/Pages/DISTRICT-HEALTH-BAROMETER-201819.aspx)",
"[Data Repository](https://dd.dhmis.org/orgunits.html?file=NIDS%20Integrated&source=nids&ver=91b9)",
"[Homepage](https://healthsites.io/)",
"[Article](https://dx.doi.org/10.1038%2Fs41597-019-0142-2)"),
`Raw Data` = c("[Figshare](https://figshare.com/articles/SURGICAL_RESOURCES_latestmarch2016_xlsx/12066711)",
"[Spreadsheet](http://www.health.gov.za/index.php/2014-03-17-09-09-38/reports/category/424-reports-2017?download=2652:district-health-barometer-info-2016-2017-06-feb-2018\ )",
"[Spreadsheet](https://www.hst.org.za/publications/District%20Health%20Barometers/DHB2019_19Feb2020.xlsb)",
"[No direct link available - select Download on page and select 'Level 5' data](https://dd.dhmis.org/orgunits.html?file=NIDS%20Integrated&source=nids&ver=91b9)",
"[API access](https://github.com/healthsites/healthsites/wiki/API) or [shapefile](https://healthsites.io/map?country=South Africa [Download directly in R via afrihealthsites package](https://afrimapr.github.io/afrimapr.website/code/) that forms part of [afrimapr](http://afrimapr.org))",
"[Spreadsheet](https://figshare.com/articles/Public_health_facilities_in_sub_Saharan_Africa/7725374) or [Download directly in R via afrihealthsites package](https://afrimapr.github.io/afrimapr.website/code/) that forms part of [afrimapr](http://afrimapr.org)"),
`Data License` = c("CC-BY-4.0",
"No explicit license",
"No explicit license",
"No explicit license",
"Open Database License*",
"CC-0"),
`Origin/Owner` = c("Dr. Angela Dell",
"South African National Department tof Health",
"Health Systems Trust",
"South African National Department of Health",
"Healthsites.io/OpenStreetMap*",
"Hosted by WHO Global Malaria Program/Collected by KEMRI"),
`Last Updated` = c("Mar 2016",
"Feb 2018",
"Feb 2020",
"Aug 2019",
"Mar 2020",
"Feb 2019")
)
sources_tbl %>%  kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
kableExtra::column_spec(1:colmns, border_right = T, border_left = T) %>%
kableExtra::scroll_box(width = "100%", height = "700px") %>%
kableExtra::footnote(general = "* A previous version incorrectly stated that the data is licensed as CC-BY 4.0",
general = "** A previous version stated the owner/origin as Healthsites/Crowdsourcing")
